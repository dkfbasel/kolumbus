version: '2'

services:

  kolumbus:
    container_name: kolumbus.grpc.dev.kolumbus
    build:
      context: ../../build
    volumes:
      # docker socket is required to query docker status from the container
      - /var/run/docker.sock:/var/run/docker.sock
      # certificates are required to connect to a remote stating server
      - ./certificates:/app/envoy/certificates
    environment:
        # proxy-mode outbound is to tell kolumbus to search for services
        # on the remote staging server
      - REMOTE_PROXY_MODE=outbound
      # server address and port of the remote kolumbus instance that
      # will forward the calls to respective services on the remote host
      - REMOTE_PROXY_ADDRESS=178.209.48.181
      - REMOTE_PROXY_PORT=1498
    ports:
      - 8084:1492
      - 8086:9901

  client:
    container_name: kolumbus.grpc.dev.client
    image: dkfbasel/hot-reload-go:1.10.2
    volumes:
      - ./src/client:/go/src/github.com/dkfbasel/kolumbus/examples/grpc-dev/src/client
      - ./src/proto:/go/src/github.com/dkfbasel/kolumbus/examples/grpc-dev/src/proto
    environment:
      - PROJECT=github.com/dkfbasel/kolumbus/examples/grpc-dev/src/client
      # all grpc service requests should be sent to kolumbus
      - KOLUMBUS=kolumbus:1494
    ports:
      - 7071:80

  echo:
    container_name: kolumbus.grpc.dev.helloworld
    image: dkfbasel/hot-reload-go:1.10.2
    volumes:
      - ./src/service:/go/src/github.com/dkfbasel/kolumbus/examples/grpc-dev/src/service
      - ./src/proto/helloworld:/go/src/github.com/dkfbasel/kolumbus/examples/grpc-dev/src/proto/helloworld
    environment:
      - PROJECT=github.com/dkfbasel/kolumbus/examples/grpc-dev/src/service
    labels:
      # service name must match the name of the grpc package as the grpc
      # connection is made to address/packagename.servicename/methodname
      # route matching is done via prefix
      # i.e. helloworld or helloworld.Helloworld would work here
      - envoyproxy.service=helloworld
      - envoyproxy.port=80
